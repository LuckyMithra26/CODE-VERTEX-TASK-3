import tkinter as tk
from tkinter import ttk, messagebox
import random
import string
import pyperclip

class PasswordGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Password Generator")
        self.root.geometry("400x400")
        self.root.resizable(False, False)

        # Define StringVars for entries and checkboxes
        self.length_var = tk.IntVar(value=12)
        self.upper_var = tk.BooleanVar(value=True)
        self.lower_var = tk.BooleanVar(value=True)
        self.numbers_var = tk.BooleanVar(value=True)
        self.symbols_var = tk.BooleanVar(value=False)
        self.password_var = tk.StringVar()

        self.create_widgets()

    def create_widgets(self):
        padding = {'padx': 10, 'pady': 10}

        # Password Length Label and Spinbox
        length_label = ttk.Label(self.root, text="Password Length:")
        length_label.pack(**padding)

        length_spinbox = ttk.Spinbox(
            self.root, from_=4, to=100, textvariable=self.length_var, width=10
        )
        length_spinbox.pack(**padding)

        # Complexity Checkboxes
        complexity_frame = ttk.LabelFrame(self.root, text="Include Characters")
        complexity_frame.pack(fill="x", **padding)

        upper_check = ttk.Checkbutton(
            complexity_frame, text="Uppercase (A-Z)", variable=self.upper_var
        )
        upper_check.pack(anchor='w', padx=20, pady=2)

        lower_check = ttk.Checkbutton(
            complexity_frame, text="Lowercase (a-z)", variable=self.lower_var
        )
        lower_check.pack(anchor='w', padx=20, pady=2)

        numbers_check = ttk.Checkbutton(
            complexity_frame, text="Numbers (0-9)", variable=self.numbers_var
        )
        numbers_check.pack(anchor='w', padx=20, pady=2)

        symbols_check = ttk.Checkbutton(
            complexity_frame, text="Symbols (!@#$%^&*)", variable=self.symbols_var
        )
        symbols_check.pack(anchor='w', padx=20, pady=2)

        # Generate Button
        generate_button = ttk.Button(self.root, text="Generate Password", command=self.generate_password)
        generate_button.pack(**padding)

        # Password Display
        password_label = ttk.Label(self.root, text="Generated Password:")
        password_label.pack(**padding)

        password_entry = ttk.Entry(self.root, textvariable=self.password_var, width=30, state='readonly')
        password_entry.pack(**padding)

        # Copy Button
        copy_button = ttk.Button(self.root, text="Copy to Clipboard", command=self.copy_to_clipboard)
        copy_button.pack(**padding)

    def generate_password(self):
        length = self.length_var.get()
        include_upper = self.upper_var.get()
        include_lower = self.lower_var.get()
        include_numbers = self.numbers_var.get()
        include_symbols = self.symbols_var.get()

        if not any([include_upper, include_lower, include_numbers, include_symbols]):
            messagebox.showwarning("Selection Error", "Please select at least one character type.")
            return

        character_pool = ''
        if include_upper:
            character_pool += string.ascii_uppercase
        if include_lower:
            character_pool += string.ascii_lowercase
        if include_numbers:
            character_pool += string.digits
        if include_symbols:
            character_pool += string.punctuation

        if not character_pool:
            messagebox.showerror("Error", "No characters available to generate password.")
            return

        # Ensure the password has at least one character from each selected category
        password = []
        if include_upper:
            password.append(random.choice(string.ascii_uppercase))
        if include_lower:
            password.append(random.choice(string.ascii_lowercase))
        if include_numbers:
            password.append(random.choice(string.digits))
        if include_symbols:
            password.append(random.choice(string.punctuation))

        # Fill the rest of the password length with random choices from the pool
        if len(password) < length:
            password += random.choices(character_pool, k=length - len(password))

        # Shuffle the resulting password list to prevent predictable sequences
        random.shuffle(password)

        final_password = ''.join(password)
        self.password_var.set(final_password)

    def copy_to_clipboard(self):
        password = self.password_var.get()
        if password:
            pyperclip.copy(password)
            messagebox.showinfo("Copied", "Password copied to clipboard.")
        else:
            messagebox.showwarning("No Password", "No password to copy. Generate one first.")

def main():
    root = tk.Tk()
    app = PasswordGeneratorApp(root)
    root.mainloop()

if __name__ == "__main__":
    try:
        main()
    except ImportError as e:
        messagebox.showerror("Import Error", f"Required module not found: {e.name}\nPlease install it using pip.")
    except Exception as e:
        messagebox.showerror("Error", f"An unexpected error occurred: {str(e)}")
